//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { ItemsEntity } from './db/Items.entity';
import { UsersEntity } from './db/Users.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [SettingsEntity, ItemsEntity, UsersEntity];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Items: [
        {
          Name: 'Name 1',
          Picture: 'Picture 1',
          Description: 'Description 1',
          Price: 0.9,
          Favorite: false,
          Popularity: 1,
          id: 80,
        },
        {
          Name: 'Name 2',
          Picture: 'Picture 2',
          Description: 'Description 2',
          Price: 0.58,
          Favorite: false,
          Popularity: 2,
          id: 30,
        },
        {
          Name: 'Name 3',
          Picture: 'Picture 3',
          Description: 'Description 3',
          Price: 0.4,
          Favorite: true,
          Popularity: 3,
          id: 32,
        },
        {
          Name: 'Name 4',
          Picture: 'Picture 4',
          Description: 'Description 4',
          Price: 0.73,
          Favorite: true,
          Popularity: 4,
          id: 87,
        },
        {
          Name: 'Name 5',
          Picture: 'Picture 5',
          Description: 'Description 5',
          Price: 0.44,
          Favorite: true,
          Popularity: 5,
          id: 55,
        },
      ],
      Users: [
        { Username: 'Username 1', Password: 'Password 1', id: 99 },
        { Username: 'Username 2', Password: 'Password 2', id: 46 },
        { Username: 'Username 3', Password: 'Password 3', id: 17 },
        { Username: 'Username 4', Password: 'Password 4', id: 97 },
        { Username: 'Username 5', Password: 'Password 5', id: 71 },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('ItemsEntity', data.Items);
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
